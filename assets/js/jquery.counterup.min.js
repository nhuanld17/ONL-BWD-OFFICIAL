(function ($) {
    "use strict";
    $.fn.counterUp = function (options) {
        var settings = $.extend({
            time: 400,
            delay: 10
        }, options);

        return this.each(function () {
            var $this = $(this);
            var counterSettings = settings;
            var counterFunction = function () {
                var counterValues = [];
                var divisions = counterSettings.time / counterSettings.delay;
                var numText = $this.text();
                var isComma = /[0-9]+,[0-9]+/.test(numText);

                numText = numText.replace(/,/g, "");
                var isInteger = /^[0-9]+$/.test(numText);
                var isFloat = /^[0-9]+\.[0-9]+$/.test(numText);
                var decimalPlaces = isFloat ? (numText.split(".")[1] || []).length : 0;

                for (var i = divisions; i >= 1; i--) {
                    var newNum = parseInt(numText / divisions * i);
                    if (isFloat) {
                        newNum = parseFloat(numText / divisions * i).toFixed(decimalPlaces);
                    }
                    if (isComma) {
                        while (/(\d+)(\d{3})/.test(newNum.toString())) {
                            newNum = newNum.toString().replace(/(\d+)(\d{3})/, "$1,$2");
                        }
                    }
                    counterValues.unshift(newNum);
                }

                $this.data("counterup-nums", counterValues);
                $this.text("0");

                var updateCounter = function () {
                    $this.text($this.data("counterup-nums").shift());
                    if ($this.data("counterup-nums").length) {
                        setTimeout($this.data("counterup-func"), counterSettings.delay);
                    } else {
                        delete $this.data("counterup-nums");
                        $this.data("counterup-nums", null);
                        $this.data("counterup-func", null);
                    }
                };

                $this.data("counterup-func", updateCounter);
                setTimeout($this.data("counterup-func"), counterSettings.delay);
            };

            $this.waypoint(counterFunction, {
                offset: "100%",
                triggerOnce: true
            });
        });
    };
})(jQuery);